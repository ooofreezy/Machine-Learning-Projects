# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1fVNYWlcKFQNEYC67pjwCZ92e54Tsvv

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Loading dataset to a pandas dataframe
credit_card_data = pd.read_csv('/content/creditcard.csv')

# printing the first 5 rows of the dataset
credit_card_data.head()

# printing the last 5 rows of the data
credit_card_data.tail()

# checking for information on the dataset
credit_card_data.info()

# Checking for missing values in the dataset
credit_card_data.isnull().sum()

# checking the distribution of legit transactions and fraudulent transactions
credit_card_data['Class'].value_counts()

"""This Dataset is highly unbalanced

0 --> Normal Transactions


1--> Fraudulent Transactions
"""

# seperating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

# computing statistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

# Compare the values of both Transactions
credit_card_data.groupby('Class').mean()

"""Under-Sampling

Build a sample dataset containing similar distribution of normal transactions and fraudulent transactions

Number of Fraudulent Transactions -->
"""

legit_sample = legit.sample(n=492)

"""Concatenating two DataFrames"""

new_dataset = pd.concat([legit_sample, fraud ], axis=0)

new_dataset.head()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Spliting the Data into Features and Targets"""

X = new_dataset.drop(columns = 'Class', axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

"""Spliting the data into training and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model =LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy )

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ' , test_data_accuracy)